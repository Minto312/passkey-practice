// Code generated by ent, DO NOT EDIT.

package passkey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Minto312/passkey-practice/backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldID, id))
}

// CredentialID applies equality check predicate on the "credential_id" field. It's identical to CredentialIDEQ.
func CredentialID(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCredentialID, v))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldPublicKey, v))
}

// DeviceName applies equality check predicate on the "device_name" field. It's identical to DeviceNameEQ.
func DeviceName(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldDeviceName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCreatedAt, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldLastUsedAt, v))
}

// CredentialIDEQ applies the EQ predicate on the "credential_id" field.
func CredentialIDEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCredentialID, v))
}

// CredentialIDNEQ applies the NEQ predicate on the "credential_id" field.
func CredentialIDNEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldCredentialID, v))
}

// CredentialIDIn applies the In predicate on the "credential_id" field.
func CredentialIDIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldCredentialID, vs...))
}

// CredentialIDNotIn applies the NotIn predicate on the "credential_id" field.
func CredentialIDNotIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldCredentialID, vs...))
}

// CredentialIDGT applies the GT predicate on the "credential_id" field.
func CredentialIDGT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldCredentialID, v))
}

// CredentialIDGTE applies the GTE predicate on the "credential_id" field.
func CredentialIDGTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldCredentialID, v))
}

// CredentialIDLT applies the LT predicate on the "credential_id" field.
func CredentialIDLT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldCredentialID, v))
}

// CredentialIDLTE applies the LTE predicate on the "credential_id" field.
func CredentialIDLTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldCredentialID, v))
}

// CredentialIDContains applies the Contains predicate on the "credential_id" field.
func CredentialIDContains(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContains(FieldCredentialID, v))
}

// CredentialIDHasPrefix applies the HasPrefix predicate on the "credential_id" field.
func CredentialIDHasPrefix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasPrefix(FieldCredentialID, v))
}

// CredentialIDHasSuffix applies the HasSuffix predicate on the "credential_id" field.
func CredentialIDHasSuffix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasSuffix(FieldCredentialID, v))
}

// CredentialIDEqualFold applies the EqualFold predicate on the "credential_id" field.
func CredentialIDEqualFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldCredentialID, v))
}

// CredentialIDContainsFold applies the ContainsFold predicate on the "credential_id" field.
func CredentialIDContainsFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldCredentialID, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...[]byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...[]byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldPublicKey, v))
}

// DeviceNameEQ applies the EQ predicate on the "device_name" field.
func DeviceNameEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldDeviceName, v))
}

// DeviceNameNEQ applies the NEQ predicate on the "device_name" field.
func DeviceNameNEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldDeviceName, v))
}

// DeviceNameIn applies the In predicate on the "device_name" field.
func DeviceNameIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldDeviceName, vs...))
}

// DeviceNameNotIn applies the NotIn predicate on the "device_name" field.
func DeviceNameNotIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldDeviceName, vs...))
}

// DeviceNameGT applies the GT predicate on the "device_name" field.
func DeviceNameGT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldDeviceName, v))
}

// DeviceNameGTE applies the GTE predicate on the "device_name" field.
func DeviceNameGTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldDeviceName, v))
}

// DeviceNameLT applies the LT predicate on the "device_name" field.
func DeviceNameLT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldDeviceName, v))
}

// DeviceNameLTE applies the LTE predicate on the "device_name" field.
func DeviceNameLTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldDeviceName, v))
}

// DeviceNameContains applies the Contains predicate on the "device_name" field.
func DeviceNameContains(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContains(FieldDeviceName, v))
}

// DeviceNameHasPrefix applies the HasPrefix predicate on the "device_name" field.
func DeviceNameHasPrefix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasPrefix(FieldDeviceName, v))
}

// DeviceNameHasSuffix applies the HasSuffix predicate on the "device_name" field.
func DeviceNameHasSuffix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasSuffix(FieldDeviceName, v))
}

// DeviceNameEqualFold applies the EqualFold predicate on the "device_name" field.
func DeviceNameEqualFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldDeviceName, v))
}

// DeviceNameContainsFold applies the ContainsFold predicate on the "device_name" field.
func DeviceNameContainsFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldDeviceName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldCreatedAt, v))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldLastUsedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Passkey {
	return predicate.Passkey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Passkey {
	return predicate.Passkey(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Passkey) predicate.Passkey {
	return predicate.Passkey(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Passkey) predicate.Passkey {
	return predicate.Passkey(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Passkey) predicate.Passkey {
	return predicate.Passkey(sql.NotPredicates(p))
}
