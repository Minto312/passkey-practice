// Code generated by ent, DO NOT EDIT.

package passkey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the passkey type in the database.
	Label = "passkey"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCredentialID holds the string denoting the credential_id field in the database.
	FieldCredentialID = "credential_id"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldDeviceName holds the string denoting the device_name field in the database.
	FieldDeviceName = "device_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the passkey in the database.
	Table = "passkeys"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "passkeys"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_passkeys"
)

// Columns holds all SQL columns for passkey fields.
var Columns = []string{
	FieldID,
	FieldCredentialID,
	FieldPublicKey,
	FieldDeviceName,
	FieldCreatedAt,
	FieldLastUsedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "passkeys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_passkeys",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastUsedAt holds the default value on creation for the "last_used_at" field.
	DefaultLastUsedAt func() time.Time
	// UpdateDefaultLastUsedAt holds the default value on update for the "last_used_at" field.
	UpdateDefaultLastUsedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Passkey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCredentialID orders the results by the credential_id field.
func ByCredentialID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCredentialID, opts...).ToFunc()
}

// ByDeviceName orders the results by the device_name field.
func ByDeviceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
