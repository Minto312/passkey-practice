// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Minto312/passkey-practice/backend/ent/authhistory"
	"github.com/Minto312/passkey-practice/backend/ent/user"
	"github.com/google/uuid"
)

// AuthHistoryCreate is the builder for creating a AuthHistory entity.
type AuthHistoryCreate struct {
	config
	mutation *AuthHistoryMutation
	hooks    []Hook
}

// SetMethod sets the "method" field.
func (ahc *AuthHistoryCreate) SetMethod(s string) *AuthHistoryCreate {
	ahc.mutation.SetMethod(s)
	return ahc
}

// SetAuthenticatedAt sets the "authenticated_at" field.
func (ahc *AuthHistoryCreate) SetAuthenticatedAt(t time.Time) *AuthHistoryCreate {
	ahc.mutation.SetAuthenticatedAt(t)
	return ahc
}

// SetNillableAuthenticatedAt sets the "authenticated_at" field if the given value is not nil.
func (ahc *AuthHistoryCreate) SetNillableAuthenticatedAt(t *time.Time) *AuthHistoryCreate {
	if t != nil {
		ahc.SetAuthenticatedAt(*t)
	}
	return ahc
}

// SetIPAddress sets the "ip_address" field.
func (ahc *AuthHistoryCreate) SetIPAddress(s string) *AuthHistoryCreate {
	ahc.mutation.SetIPAddress(s)
	return ahc
}

// SetUserAgent sets the "user_agent" field.
func (ahc *AuthHistoryCreate) SetUserAgent(s string) *AuthHistoryCreate {
	ahc.mutation.SetUserAgent(s)
	return ahc
}

// SetID sets the "id" field.
func (ahc *AuthHistoryCreate) SetID(u uuid.UUID) *AuthHistoryCreate {
	ahc.mutation.SetID(u)
	return ahc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ahc *AuthHistoryCreate) SetNillableID(u *uuid.UUID) *AuthHistoryCreate {
	if u != nil {
		ahc.SetID(*u)
	}
	return ahc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ahc *AuthHistoryCreate) SetUserID(id uuid.UUID) *AuthHistoryCreate {
	ahc.mutation.SetUserID(id)
	return ahc
}

// SetUser sets the "user" edge to the User entity.
func (ahc *AuthHistoryCreate) SetUser(u *User) *AuthHistoryCreate {
	return ahc.SetUserID(u.ID)
}

// Mutation returns the AuthHistoryMutation object of the builder.
func (ahc *AuthHistoryCreate) Mutation() *AuthHistoryMutation {
	return ahc.mutation
}

// Save creates the AuthHistory in the database.
func (ahc *AuthHistoryCreate) Save(ctx context.Context) (*AuthHistory, error) {
	ahc.defaults()
	return withHooks(ctx, ahc.sqlSave, ahc.mutation, ahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ahc *AuthHistoryCreate) SaveX(ctx context.Context) *AuthHistory {
	v, err := ahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahc *AuthHistoryCreate) Exec(ctx context.Context) error {
	_, err := ahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahc *AuthHistoryCreate) ExecX(ctx context.Context) {
	if err := ahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahc *AuthHistoryCreate) defaults() {
	if _, ok := ahc.mutation.AuthenticatedAt(); !ok {
		v := authhistory.DefaultAuthenticatedAt()
		ahc.mutation.SetAuthenticatedAt(v)
	}
	if _, ok := ahc.mutation.ID(); !ok {
		v := authhistory.DefaultID()
		ahc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahc *AuthHistoryCreate) check() error {
	if _, ok := ahc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "AuthHistory.method"`)}
	}
	if _, ok := ahc.mutation.AuthenticatedAt(); !ok {
		return &ValidationError{Name: "authenticated_at", err: errors.New(`ent: missing required field "AuthHistory.authenticated_at"`)}
	}
	if _, ok := ahc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "AuthHistory.ip_address"`)}
	}
	if _, ok := ahc.mutation.UserAgent(); !ok {
		return &ValidationError{Name: "user_agent", err: errors.New(`ent: missing required field "AuthHistory.user_agent"`)}
	}
	if len(ahc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "AuthHistory.user"`)}
	}
	return nil
}

func (ahc *AuthHistoryCreate) sqlSave(ctx context.Context) (*AuthHistory, error) {
	if err := ahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ahc.mutation.id = &_node.ID
	ahc.mutation.done = true
	return _node, nil
}

func (ahc *AuthHistoryCreate) createSpec() (*AuthHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthHistory{config: ahc.config}
		_spec = sqlgraph.NewCreateSpec(authhistory.Table, sqlgraph.NewFieldSpec(authhistory.FieldID, field.TypeUUID))
	)
	if id, ok := ahc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ahc.mutation.Method(); ok {
		_spec.SetField(authhistory.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := ahc.mutation.AuthenticatedAt(); ok {
		_spec.SetField(authhistory.FieldAuthenticatedAt, field.TypeTime, value)
		_node.AuthenticatedAt = value
	}
	if value, ok := ahc.mutation.IPAddress(); ok {
		_spec.SetField(authhistory.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := ahc.mutation.UserAgent(); ok {
		_spec.SetField(authhistory.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if nodes := ahc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authhistory.UserTable,
			Columns: []string{authhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_auth_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthHistoryCreateBulk is the builder for creating many AuthHistory entities in bulk.
type AuthHistoryCreateBulk struct {
	config
	err      error
	builders []*AuthHistoryCreate
}

// Save creates the AuthHistory entities in the database.
func (ahcb *AuthHistoryCreateBulk) Save(ctx context.Context) ([]*AuthHistory, error) {
	if ahcb.err != nil {
		return nil, ahcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ahcb.builders))
	nodes := make([]*AuthHistory, len(ahcb.builders))
	mutators := make([]Mutator, len(ahcb.builders))
	for i := range ahcb.builders {
		func(i int, root context.Context) {
			builder := ahcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ahcb *AuthHistoryCreateBulk) SaveX(ctx context.Context) []*AuthHistory {
	v, err := ahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahcb *AuthHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcb *AuthHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ahcb.Exec(ctx); err != nil {
		panic(err)
	}
}
