// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Minto312/passkey-practice/backend/ent/authhistory"
	"github.com/Minto312/passkey-practice/backend/ent/user"
	"github.com/google/uuid"
)

// AuthHistory is the model entity for the AuthHistory schema.
type AuthHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// AuthenticatedAt holds the value of the "authenticated_at" field.
	AuthenticatedAt time.Time `json:"authenticated_at,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthHistoryQuery when eager-loading is set.
	Edges               AuthHistoryEdges `json:"edges"`
	user_auth_histories *uuid.UUID
	selectValues        sql.SelectValues
}

// AuthHistoryEdges holds the relations/edges for other nodes in the graph.
type AuthHistoryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthHistoryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authhistory.FieldMethod, authhistory.FieldIPAddress, authhistory.FieldUserAgent:
			values[i] = new(sql.NullString)
		case authhistory.FieldAuthenticatedAt:
			values[i] = new(sql.NullTime)
		case authhistory.FieldID:
			values[i] = new(uuid.UUID)
		case authhistory.ForeignKeys[0]: // user_auth_histories
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthHistory fields.
func (ah *AuthHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authhistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ah.ID = *value
			}
		case authhistory.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				ah.Method = value.String
			}
		case authhistory.FieldAuthenticatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field authenticated_at", values[i])
			} else if value.Valid {
				ah.AuthenticatedAt = value.Time
			}
		case authhistory.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				ah.IPAddress = value.String
			}
		case authhistory.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				ah.UserAgent = value.String
			}
		case authhistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_auth_histories", values[i])
			} else if value.Valid {
				ah.user_auth_histories = new(uuid.UUID)
				*ah.user_auth_histories = *value.S.(*uuid.UUID)
			}
		default:
			ah.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthHistory.
// This includes values selected through modifiers, order, etc.
func (ah *AuthHistory) Value(name string) (ent.Value, error) {
	return ah.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AuthHistory entity.
func (ah *AuthHistory) QueryUser() *UserQuery {
	return NewAuthHistoryClient(ah.config).QueryUser(ah)
}

// Update returns a builder for updating this AuthHistory.
// Note that you need to call AuthHistory.Unwrap() before calling this method if this AuthHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ah *AuthHistory) Update() *AuthHistoryUpdateOne {
	return NewAuthHistoryClient(ah.config).UpdateOne(ah)
}

// Unwrap unwraps the AuthHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ah *AuthHistory) Unwrap() *AuthHistory {
	_tx, ok := ah.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthHistory is not a transactional entity")
	}
	ah.config.driver = _tx.drv
	return ah
}

// String implements the fmt.Stringer.
func (ah *AuthHistory) String() string {
	var builder strings.Builder
	builder.WriteString("AuthHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ah.ID))
	builder.WriteString("method=")
	builder.WriteString(ah.Method)
	builder.WriteString(", ")
	builder.WriteString("authenticated_at=")
	builder.WriteString(ah.AuthenticatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(ah.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(ah.UserAgent)
	builder.WriteByte(')')
	return builder.String()
}

// AuthHistories is a parsable slice of AuthHistory.
type AuthHistories []*AuthHistory
