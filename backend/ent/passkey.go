// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Minto312/passkey-practice/backend/ent/passkey"
	"github.com/Minto312/passkey-practice/backend/ent/user"
	"github.com/google/uuid"
)

// Passkey is the model entity for the Passkey schema.
type Passkey struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CredentialID holds the value of the "credential_id" field.
	CredentialID string `json:"credential_id,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey []byte `json:"public_key,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PasskeyQuery when eager-loading is set.
	Edges         PasskeyEdges `json:"edges"`
	user_passkeys *uuid.UUID
	selectValues  sql.SelectValues
}

// PasskeyEdges holds the relations/edges for other nodes in the graph.
type PasskeyEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PasskeyEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Passkey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passkey.FieldPublicKey:
			values[i] = new([]byte)
		case passkey.FieldCredentialID, passkey.FieldDeviceName:
			values[i] = new(sql.NullString)
		case passkey.FieldCreatedAt, passkey.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		case passkey.FieldID:
			values[i] = new(uuid.UUID)
		case passkey.ForeignKeys[0]: // user_passkeys
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Passkey fields.
func (pa *Passkey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passkey.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case passkey.FieldCredentialID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credential_id", values[i])
			} else if value.Valid {
				pa.CredentialID = value.String
			}
		case passkey.FieldPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value != nil {
				pa.PublicKey = *value
			}
		case passkey.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				pa.DeviceName = value.String
			}
		case passkey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case passkey.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				pa.LastUsedAt = value.Time
			}
		case passkey.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_passkeys", values[i])
			} else if value.Valid {
				pa.user_passkeys = new(uuid.UUID)
				*pa.user_passkeys = *value.S.(*uuid.UUID)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Passkey.
// This includes values selected through modifiers, order, etc.
func (pa *Passkey) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Passkey entity.
func (pa *Passkey) QueryUser() *UserQuery {
	return NewPasskeyClient(pa.config).QueryUser(pa)
}

// Update returns a builder for updating this Passkey.
// Note that you need to call Passkey.Unwrap() before calling this method if this Passkey
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Passkey) Update() *PasskeyUpdateOne {
	return NewPasskeyClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Passkey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Passkey) Unwrap() *Passkey {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Passkey is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Passkey) String() string {
	var builder strings.Builder
	builder.WriteString("Passkey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("credential_id=")
	builder.WriteString(pa.CredentialID)
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(fmt.Sprintf("%v", pa.PublicKey))
	builder.WriteString(", ")
	builder.WriteString("device_name=")
	builder.WriteString(pa.DeviceName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(pa.LastUsedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Passkeys is a parsable slice of Passkey.
type Passkeys []*Passkey
