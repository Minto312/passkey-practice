// Code generated by ent, DO NOT EDIT.

package authhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Minto312/passkey-practice/backend/internal/infra/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLTE(FieldID, id))
}

// AuthenticatedAt applies equality check predicate on the "authenticated_at" field. It's identical to AuthenticatedAtEQ.
func AuthenticatedAt(v time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldAuthenticatedAt, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldUserAgent, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldUserID, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v Method) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v Method) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...Method) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...Method) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNotIn(FieldMethod, vs...))
}

// AuthenticatedAtEQ applies the EQ predicate on the "authenticated_at" field.
func AuthenticatedAtEQ(v time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldAuthenticatedAt, v))
}

// AuthenticatedAtNEQ applies the NEQ predicate on the "authenticated_at" field.
func AuthenticatedAtNEQ(v time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNEQ(FieldAuthenticatedAt, v))
}

// AuthenticatedAtIn applies the In predicate on the "authenticated_at" field.
func AuthenticatedAtIn(vs ...time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldIn(FieldAuthenticatedAt, vs...))
}

// AuthenticatedAtNotIn applies the NotIn predicate on the "authenticated_at" field.
func AuthenticatedAtNotIn(vs ...time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNotIn(FieldAuthenticatedAt, vs...))
}

// AuthenticatedAtGT applies the GT predicate on the "authenticated_at" field.
func AuthenticatedAtGT(v time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGT(FieldAuthenticatedAt, v))
}

// AuthenticatedAtGTE applies the GTE predicate on the "authenticated_at" field.
func AuthenticatedAtGTE(v time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGTE(FieldAuthenticatedAt, v))
}

// AuthenticatedAtLT applies the LT predicate on the "authenticated_at" field.
func AuthenticatedAtLT(v time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLT(FieldAuthenticatedAt, v))
}

// AuthenticatedAtLTE applies the LTE predicate on the "authenticated_at" field.
func AuthenticatedAtLTE(v time.Time) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLTE(FieldAuthenticatedAt, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldContainsFold(FieldUserAgent, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.AuthHistory {
	return predicate.AuthHistory(sql.FieldNotIn(FieldUserID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AuthHistory {
	return predicate.AuthHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.AuthHistory {
	return predicate.AuthHistory(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthHistory) predicate.AuthHistory {
	return predicate.AuthHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthHistory) predicate.AuthHistory {
	return predicate.AuthHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthHistory) predicate.AuthHistory {
	return predicate.AuthHistory(sql.NotPredicates(p))
}
